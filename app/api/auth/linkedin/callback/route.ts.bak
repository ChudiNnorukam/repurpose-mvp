/**
 * LinkedIn OAuth Callback Route
 *
 * GET /api/auth/linkedin/callback
 *
 * Handles the LinkedIn OAuth callback:
 * 1. Verifies state (CSRF protection)
 * 2. Exchanges authorization code for access token
 * 3. Fetches LinkedIn user info
 * 4. Stores encrypted token in database
 * 5. Redirects to success page
 *
 * Called by LinkedIn after user authorizes the app
 */

import { NextRequest, NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createRouteHandlerClient } from '@/lib/supabase-client'
import {
  exchangeLinkedInCode,
  getLinkedInUser,
  storeLinkedInAccount
} from '@/lib/linkedin/oauth'

export const dynamic = 'force-dynamic'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)

  try {
    // Check if user is authenticated
    const supabase = createClient()
    const { data: { user }, error: authError } = await supabase.auth.getUser()

    if (authError || !user) {
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/login?error=unauthorized`
      )
    }

    // Get OAuth parameters from URL
    const code = searchParams.get('code')
    const state = searchParams.get('state')
    const error = searchParams.get('error')
    const errorDescription = searchParams.get('error_description')

    // Check for OAuth errors
    if (error) {
      console.error('LinkedIn OAuth error:', error, errorDescription)
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/connections?error=linkedin_${error}`
      )
    }

    if (!code || !state) {
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/connections?error=missing_params`
      )
    }

    // Retrieve stored state from cookie
    const cookieStore = cookies()
    const storedState = cookieStore.get('linkedin_oauth_state')?.value

    if (!storedState) {
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/connections?error=session_expired`
      )
    }

    // Verify state (CSRF protection)
    if (state !== storedState) {
      console.error('State mismatch:', { received: state, expected: storedState })
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/connections?error=invalid_state`
      )
    }

    // Clear cookie (one-time use)
    cookieStore.delete('linkedin_oauth_state')

    // Exchange code for access token
    const redirectUri = `${process.env.NEXT_PUBLIC_APP_URL}/api/auth/linkedin/callback`

    const tokenData = await exchangeLinkedInCode({
      code,
      redirectUri
    })

    // Fetch LinkedIn user info
    const linkedInUser = await getLinkedInUser(tokenData.accessToken)

    // Store account in database (with encrypted token)
    await storeLinkedInAccount({
      userId: user.id,
      linkedInUser,
      accessToken: tokenData.accessToken,
      expiresIn: tokenData.expiresIn,
      scopes: tokenData.scope.split(' ')
    })

    // Success! Redirect to connections page
    return NextResponse.redirect(
      `${process.env.NEXT_PUBLIC_APP_URL}/connections?success=linkedin_connected&name=${encodeURIComponent(linkedInUser.name)}`
    )

  } catch (error: any) {
    console.error('LinkedIn OAuth callback error:', error)

    return NextResponse.redirect(
      `${process.env.NEXT_PUBLIC_APP_URL}/connections?error=linkedin_failed&message=${encodeURIComponent(error.message)}`
    )
  }
}
